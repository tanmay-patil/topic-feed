{"version":3,"sources":["reducers/topicsReducer.js","reducers/index.js","actions/actionTypes.js","store/index.js","components/Topic/index.js","components/Topics/Topics.js","actions/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","topics","combineReducers","topicsReducer","state","arguments","length","undefined","action","type","Object","objectSpread","payload","map","topic","id","upVotes","downVotes","topicText","concat","toConsumableArray","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","Topic","_this$props$topic","this","props","_this$props","updateUpvote","updateDownvote","react_default","a","createElement","className","onClick","Component","Topics","isUpvoted","isDownvoted","getTopics","addTopic","e","setState","target","value","_this2","currentStateTopics","name","onChange","onChangeText","bind","Topic_Topic","key","connect","_ref","asyncToGenerator","regenerator_default","mark","_callee","dispatch","wrap","_context","prev","next","data","stop","_x","_ref2","_callee2","_context2","_x2","_ref3","_callee3","_context3","_x3","_ref4","_callee4","_context4","_x4","App","react_redux_es","components_Topics_Topics","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a41245f.chunk.js","sourcesContent":["import {\n    GET_TOPICS,\n    UPDATE_UPVOTE,\n    UPDATE_DOWNVOTE,\n    ADD_TOPIC\n} from '../actions/actionTypes';\n\nconst initialState = { topics: [] };\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case GET_TOPICS:\n            return { ...state, topics: action.payload };\n        case UPDATE_UPVOTE:\n            return {\n                ...state,\n                topics: state.topics.map(topic => {\n                    if (topic.id === action.payload) {\n                        topic.upVotes += 1;\n                    }\n                    return topic;\n                })\n            };\n\n        case UPDATE_DOWNVOTE:\n            return {\n                ...state,\n                topics: state.topics.map(topic => {\n                    if (topic.id === action.payload) {\n                        topic.downVotes += 1;\n                    }\n                    return topic;\n                })\n            };\n\n        case ADD_TOPIC:\n            let topic = {\n                topicText: action.payload,\n                upVotes: 0,\n                downVotes: 0,\n                id: state.topics.length + 1\n            };\n            return {\n                ...state,\n                topics: [topic, ...state.topics]\n            };\n\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport topicsReducer from './topicsReducer';\n\nexport default combineReducers({\n    topicsReducer: topicsReducer\n});\n","export const GET_TOPICS = 'GET_TOPICS';\nexport const UPDATE_UPVOTE = 'UPDATE_UPVOTE';\nexport const UPDATE_DOWNVOTE = 'UPDATE_DOWNVOTE';\nexport const ADD_TOPIC = 'ADD_TOPIC';\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        (window.__REDUX_DEVTOOLS_EXTENSION__ &&\n            window.__REDUX_DEVTOOLS_EXTENSION__()) ||\n            compose\n    )\n);\n\nexport default store;\n","import React, { Component } from 'react';\n\nexport default class Topic extends Component {\n    render() {\n        const { topicText, upVotes, downVotes } = this.props.topic;\n        const { updateUpvote, updateDownvote } = this.props;\n\n        return (\n            <div className=\"row container mt-3\">\n                <div className=\"col-sm-1\">\n                    <button onClick={updateUpvote}>\n                        <i className=\"far fa-thumbs-up\">{upVotes}</i>\n                    </button>\n                </div>\n                <div className=\"col-sm-1\">\n                    <button onClick={updateDownvote}>\n                        <i className=\"far fa-thumbs-down\">{downVotes}</i>\n                    </button>\n                </div>\n                <div className=\"col-sm-6\">{topicText}</div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './styles.css';\nimport { connect } from 'react-redux';\nimport {\n    getTopics,\n    updateUpvote,\n    updateDownvote,\n    addTopic\n} from '../../actions';\nimport Topic from '../Topic/';\n\nclass Topics extends Component {\n    state = { topicText: '', isUpvoted: false, isDownvoted: false };\n\n    componentDidMount() {\n        this.props.getTopics();\n    }\n\n    updateUpvote(id) {\n        this.props.updateUpvote(id);\n    }\n\n    updateDownvote(id) {\n        this.props.updateDownvote(id);\n    }\n\n    addTopic(topicText) {\n        this.props.addTopic(topicText);\n    }\n\n    onChangeText(e) {\n        this.setState({ topicText: e.target.value });\n    }\n\n    render() {\n        const { topics } = this.props.currentStateTopics;\n        return (\n            <div className=\"container mt-5\">\n                <div className=\"container\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        name=\"inputTopic\"\n                        id=\"inputTopic\"\n                        onChange={this.onChangeText.bind(this)}\n                    />\n                    <button\n                        type=\"submit\"\n                        className=\"btn btn-primary mt-2\"\n                        name=\"submitTopic\"\n                        id=\"submitTopic\"\n                        onClick={this.addTopic.bind(this, this.state.topicText)}\n                    >\n                        Submit\n                    </button>\n                </div>\n\n                {topics.map(topic => (\n                    <Topic\n                        key={topic.id}\n                        updateUpvote={this.updateUpvote.bind(this, topic.id)}\n                        updateDownvote={this.updateDownvote.bind(\n                            this,\n                            topic.id\n                        )}\n                        topic={topic}\n                    />\n                ))}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    currentStateTopics: state.topicsReducer\n});\n\nexport default connect(\n    mapStateToProps,\n    { getTopics, updateUpvote, updateDownvote, addTopic }\n)(Topics);\n","import {\n    GET_TOPICS,\n    UPDATE_UPVOTE,\n    UPDATE_DOWNVOTE,\n    ADD_TOPIC\n} from './actionTypes';\nimport data from '../backend/data.json';\n\nexport const getTopics = () => async dispatch => {\n    // const res = await Axios.get('../public/manifest.json');\n    dispatch({\n        type: GET_TOPICS,\n        payload: data\n    });\n};\nexport const updateUpvote = id => async dispatch => {\n    dispatch({\n        type: UPDATE_UPVOTE,\n        payload: id\n    });\n};\nexport const updateDownvote = id => async dispatch => {\n    dispatch({\n        type: UPDATE_DOWNVOTE,\n        payload: id\n    });\n};\n\nexport const addTopic = topicText => async dispatch => {\n    dispatch({\n        type: ADD_TOPIC,\n        payload: topicText\n    });\n};\n","import React, { Component } from 'react';\nimport store from './store';\nimport { Provider } from 'react-redux';\nimport Topics from './components/Topics/Topics';\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <Topics />\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}